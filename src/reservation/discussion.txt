Reservation:

1. What: what to reserve:

    for example:
        book a flight   ---> reserve a flight ticket   ---> consider ticket properties



2. Use case:

    - search

    - select   (select seat for a flight, select time slot for a restaurant ...)

    - cancel


3. A basic general framework of reservation problem:


    input      ------->        reservation system         ------>       output


    Search Criteria   ----> search()  ---->  List<Result>  -----> select()   ----> Receipt
                                                  |
                                                  |
                                                 \ /
                                   if price or core property of result
                                   is the same, we can ignore the list
                                   and return the result directly

                                   else, cannot ignore (first class, economy class ticket)


Usually use map to maintain a object's reservation info
    example:
        Map<Table, List<TimeSlot>> map
        Map<Room, List<Date>> map

        and when new request comes, go through each object in this system
        and check the list of current obj and to see if it can receive
        new request given the new request's date or time slot

        - boolean isRequestAvailable(Request r, List<Date> dates)


Hotel reservation:
    1. first to determine which type:
        - search and select room from current hotel
        - search and select from multiple hotels


    2. List<Result>  usually return List<RoomType> not Room!!!
        vary from capacity or price etc.
        - SingleRoom
        - DoubleRoom

        What if people > capacity of any room type?
            users choose which rooms combination to reserve


      + Map<RoomType, Integer> handleSearchRequest(Request r)


    3. use cache to store internal info



Use cases:
    Hotel:
        - Search for available rooms
            1. Based on search criteria
            2. Go through all the rooms to check availability
                i. better use Map<Room, List<Date>> roomReservations in Hotel class to store the mapping info instead
                   in Room
                ii. run  boolean isRequestAvailable(Request r, List<Date> dates) on each Room in the hotel to
                    check if room can be reserved if so, add the room and this dates(start, end) into roomReservations
            3. List available room types and corresponding count

        - Make reservation
            1. Wrap RoomType and the number of rooms in a Request
                ReservationRequest
                    - StartDate
                    - EndDate
                    - Map<RoomType, Integer> roomNeeded
            2. Send the request to the hotel
            3. If there are enough rooms left, confirm the Reservation
                Hotel: + Reservation makeReservation(ReservationRequest r)
                       Reservation   (confirmed one which is generated by)
                           List<Room> rooms
                           Date StartDate
                           Date EndDate

                ************************* IMPORTANT PART ******************************
                When first send Request to Hotel (Search available rooms), we go through
                all the rooms to check its availability on given Date  (step 2, 3)

                However when making Reservation, we go through the rooms again (step 3)

                So we do redundant work here

                Example:
                    + Map<RoomType, Integer> handleSearchRequest(Request r)
                        return is like <SingleRoom, 15>
                                       <DoubleRoom, 20>    given certain request date

                    And when making reservation:
                    Reservation makeReservation(ReservationRequest r)
                        return is a Reservation
                                        Date StartDate
                                        Date EndDate
                                        Map<RoomType, Integer>  (user's choice for rooms)

                        This ReservationRequest will be sent to Hotel and check the availability
                        after checking (going through all rooms again), the Hotel will generate
                        the Reservation and return it

                ***** So to avoid this redundant work, we can invoke a cache here  *****
                Store the availability map Map<SearchRequest, Map<RoomType, List<Room>>> in the cache and once checking
                the rooms availability during making reservation process, just check the cache

                We could use LRU cache here!

                 ************************* IMPORTANT PART ******************************


            4. If there are not enough rooms left, throw exception

        - Cancel reservation

    BookingSystem:
        basic logic is like searching in hotel

        Search_Criteria_A -> search()   List<Hotel> hotels  --> select() Hotel
     -> Search_Criteria_B -> search()   Map<RoomType, Integer>  --> select() Reservation